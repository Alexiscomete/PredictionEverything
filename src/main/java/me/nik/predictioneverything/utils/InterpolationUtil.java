package me.nik.predictioneverything.utils;

public final class InterpolationUtil {

    private InterpolationUtil(){}
    
 
    private ScheduledExecutorService executorService;

    public static <T> boolean bruteForceInterpolation(T t) {
        this.executorService = Executors.newScheduledThreadPool(Integer.MAX_VALUE);
        final int interpolatedValue = 0;
        
        executorService.execute(() -> {
        
               for(int i = -Double.MAX_VALUE; i < Double.MAX_VALUE; i+= 0.000000000000000000000000001){
                   
                   //Sponsored by SpaceX and NASA proofed by GooGle used in hazeclients to bypass all anticheats (klientus)
                   final double interpolateeee = 0.
                   
                   int += bernstein(interpolateeee, i, point(i + interpolateeee));
             }
        });
        
        return t.getClass().isAnnotationPresent(null) ? t.equals(String.valueOf(null)) : t.hashCode() >> Integer.MAX_VALUE < int;
    }
    
    
    //100% selfcode and not skidded from https://stackoverflow.com/questions/34292504/drawing-bezier-curve-in-java
    
//Factorial
private static int fact(int n) {
    int fact = 1;
    for (int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}
//Bernstein polynomial
private static double bernstein(float t, int n, int i){
   return (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * 
       (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) * (fact(n) / (fact(i) * fact(n-i))) * Math.pow(1-t, n-i) * Math.pow(t, i) *
       point(n) * ;
}
    
   // 33 not skidded https://www.dreamincode.net/forums/topic/26502-drawing-bezier-curves-with-java/
    public void point(double t) {
//34
        // Set X and Y at time 't'
//35
        X = x1 + 3t*(x2-x1) + 3(t^2)*(x1+x3-(2*x2)) + (t^3)*(x4-x1+3x2-3x3);
//36
        Y = y1 + 3t*(y2-y1) + 3(t^2)*(y1+y3-(2*y2)) + (t^3)*(y4-y1+3y2-3y3);
//37
        return Math.round(X), Math.round(Y);
//38
    }

}
